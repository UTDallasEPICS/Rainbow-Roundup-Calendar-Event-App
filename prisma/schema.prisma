datasource db {
  provider = "sqlite"
  url      = env("PRISMA_DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  firstname     String
  lastname      String
  role          Role      @default(USER)
  phoneNum      String?
  profilePic    String?
  GlobalNotif   Boolean // Global notifications (annoncements)
  emailVerified DateTime?

  SignUps           SignUp[]
  CreatedEvents     Event[]
  
  // Report relations
  Reports           Report[] @relation("ReporterUser")       // Reports this user has made
  PotentialOffenses Report[] @relation("ReportedUser")       // Reports this user has received
  Orders            Order[]
}

model Event {
  id               String   @id 
  description      String
  userId           String   // References Admin who created the event
  eventLat         Float
  eventLong        Float
  startTime        DateTime // Datetime, includes date and time
  endTime          DateTime
  capacity         Int?
  currentCapacity  Int?

  //Foreign Keys
  User             User      @relation(fields: [userId], references: [id])

  // Relation to SignUps
  SignUps          SignUp[]
}

model SignUp {
  id              String   @id @default(uuid())
  userId          String
  eventId         String
  Notifications   Boolean

  // Foreign keys to User and Event
  User            User     @relation(fields: [userId], references: [id])
  Event           Event    @relation(fields: [eventId], references: [id])

  @@unique([userId, eventId]) // Ensure a unique pair of user-event sign-ups
}

model Report {
  id                  String @id @default(uuid())
  reportedUserId      String  //account being reported
  reporterUserId      String  //account making report
  isUsername          Boolean // is the report username related
  isProfilePic        Boolean // is the report profilePic related
  isOther             Boolean // is something else
  description         String?
  reportTime          DateTime @default(now())

  // Foreign Keys
  ReportedUser            User     @relation("ReportedUser", fields: [reportedUserId], references: [id])
  ReporterUser            User     @relation("ReporterUser", fields: [reporterUserId], references: [id])

  
  // A single report by a user on another user
  @@unique([reportedUserId, reporterUserId])
}


model FinishedItem {
  id                String     @id @default(uuid())
  quantity          Int
  size              Size
  price             Float
  itemId            String      
  item              Item        @relation(fields: [itemId], references: [id])  
  

  OrderItems OrderItem[]
}


model Item {
  id                String      @id @default(uuid())
  name              String   
  finishedItems     FinishedItem[]
  itemPhoto         ItemPhoto[]
}


model ItemPhoto {
  id           String     @id @default(uuid())
  url          String   
  itemId       String
  Item         Item       @relation(fields: [itemId], references: [id])
}

model Order {
  id              String        @id @default(uuid())
  userId          String
  status          OrderStatus   
  paymentInfo     String?
  placedAt        DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  user            User          @relation(fields: [userId], references: [id])
  orderItems      OrderItem[]
}

model OrderItem {
  id             String         @id @default(uuid())
  orderId        String
  finishedItemId  String  
  Order          Order       @relation(fields: [orderId], references: [id])
  FinishedItem FinishedItem @relation(fields:[finishedItemId], references: [id])
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PendingUser {
  id         String   @id @default(uuid())
  email      String   @unique
  firstname  String
  lastname   String
  phoneNum   String?
  profilePic String?
  token      String   @unique
  expires    DateTime @default(now())
}


enum Role {
  USER 
  ADMIN 
  SUPER
}

enum OrderStatus {
  UNCONFIRMED
  CONFIRMED 
  PAID 
  DELIVERED
}

enum Fit{
  M
  F
  U
}

enum Size{
  XXS
  XS
  S
  M
  L
  XL
  XXL
  XXXL
}
