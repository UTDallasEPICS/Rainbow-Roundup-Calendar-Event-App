datasource db {
  provider = "sqlite"
  url      = env("PRISMA_DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String   @id @default(uuid())
  email            String   @unique
  firstname        String
  lastname         String
  role             Role     @default(USER)
  phoneNum         String?
  profilePic       String?

  SignUps           SignUp[]
  Notifications     Notification[]
  CreatedEvents     Event[]
  
  // Report relations
  Reports           Report[] @relation("ReporterUser")       // Reports this user has made
  PotentialOffenses Report[] @relation("ReportedUser")       // Reports this user has received
}

model Event {
  id               String   @id @default(uuid())
  description      String
  userId           String   // References Admin who created the event
  date             DateTime
  eventLat         Float
  eventLong        Float
  startTime        DateTime
  endTime          DateTime
  capacity         Int?
  currentCapacity  Int?

  //Foreign Keys
  User             User      @relation(fields: [userId], references: [id])

  // Relation to SignUps
  SignUps          SignUp[]
  // Relation to Notifications
  Notifications    Notification[]
}

model SignUp {
  id              String   @id @default(uuid())
  userId          String
  eventId         String

  // Foreign keys to User and Event
  User            User     @relation(fields: [userId], references: [id])
  Event           Event    @relation(fields: [eventId], references: [id])

  @@unique([userId, eventId]) // Ensure a unique pair of user-event sign-ups
}

model Notification {
  id              String @id @default(uuid())
  userId          String
  eventId         String

  // Foreign Keys
  User            User     @relation(fields: [userId], references: [id])
  Event           Event    @relation(fields: [eventId], references: [id])

  @@unique([userId, eventId])
}

model Report {
  id                  String @id @default(uuid())
  reportedUserId      String  //account being reported
  reporterUserId      String  //account making report
  isUsername          Boolean // is the report username related
  isProfilePic        Boolean // is the report profilePic related
  isOther             Boolean // is something else
  description         String?
  reportTime          DateTime @default(now())

  // Foreign Keys
  ReportedUser            User     @relation("ReportedUser", fields: [reportedUserId], references: [id])
  ReporterUser            User     @relation("ReporterUser", fields: [reporterUserId], references: [id])

  
  // A single report by a user on another user
  @@unique([reportedUserId, reporterUserId])
}

enum Role {
  USER 
  ADMIN 
  SUPER
}
