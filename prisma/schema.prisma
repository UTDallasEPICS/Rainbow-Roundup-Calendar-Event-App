datasource db {
  provider = "sqlite"
  url      = env("PRISMA_DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String   @id @default(uuid())
  email            String   @unique
  firstname        String
  lastname         String
  role             Role     @default(USER)
  phoneNum         String?
  profilePic       String?
  GlobalNotif      Boolean // Global notifications (annoncements)
  emailVerified    DateTime?

  SignUps           SignUp[]
  Announcements     Announcement[] // references announcements created by user
  CreatedEvents     Event[]
  
  // Report relations
  Reports           Report[] @relation("ReporterUser")       // Reports this user has made
  PotentialOffenses Report[] @relation("ReportedUser")       // Reports this user has received
  CartItems         CartItem[]
  ShippingInfos     ShippingInfo[]
  Orders            Order[]
}

model Event {
  id               String   @id 
  description      String
  userId           String   // References Admin who created the event
  eventLat         Float
  eventLong        Float
  startTime        DateTime // Datetime, includes date and time
  endTime          DateTime
  capacity         Int?
  currentCapacity  Int?

  //Foreign Keys
  User             User      @relation(fields: [userId], references: [id])

  // Relation to SignUps
  SignUps          SignUp[]

  // Announcements
  Announcements     Announcement[]

}

model SignUp {
  id              String   @id @default(uuid())
  userId          String
  eventId         String
  Notifications   Boolean

  // Foreign keys to User and Event
  User            User     @relation(fields: [userId], references: [id])
  Event           Event    @relation(fields: [eventId], references: [id])

  @@unique([userId, eventId]) // Ensure a unique pair of user-event sign-ups
}

model Announcement {
  id              String @id @default(uuid())
  userId          String //user creating announcement
  eventId         String //related event
  announceBody    String // actual announcement

  // Foreign Keys
  User            User     @relation(fields: [userId], references: [id])
  Event           Event    @relation(fields: [eventId], references: [id])

  @@unique([userId, eventId])
}

model Report {
  id                  String @id @default(uuid())
  reportedUserId      String  //account being reported
  reporterUserId      String  //account making report
  isUsername          Boolean // is the report username related
  isProfilePic        Boolean // is the report profilePic related
  isOther             Boolean // is something else
  description         String?
  reportTime          DateTime @default(now())

  // Foreign Keys
  ReportedUser            User     @relation("ReportedUser", fields: [reportedUserId], references: [id])
  ReporterUser            User     @relation("ReporterUser", fields: [reporterUserId], references: [id])

  
  // A single report by a user on another user
  @@unique([reportedUserId, reporterUserId])
}

model Product {
  id          String        @id @default(uuid())
  name        String
  description String
  thumbnail   String
  ItemConfigs ItemConfig[]
}

model ItemConfig {
  id         String       @id @default(uuid())
  productId  String
  price      Float
  stock      Int
  fit        Fit
  size       Size
  product    Product      @relation(fields: [productId], references: [id])
  ItemPhotos ItemPhoto[]
  CartItems  CartItem[]
  OrderItems OrderItem[]
}

model ItemPhoto {
  id           String     @id @default(uuid())
  itemConfigId String
  photoUrl     String
  itemConfig   ItemConfig @relation(fields: [itemConfigId], references: [id])
}

model CartItem {
  id           String     @id @default(uuid())
  userId       String
  quantity     Int
  itemConfigId String
  itemConfig   ItemConfig @relation(fields: [itemConfigId], references: [id])
  user         User       @relation(fields: [userId], references: [id])
}

model Order {
  id              String        @id @default(uuid())
  userId          String
  shippingInfoId  String
  status          OrderStatus   @default(PENDING)
  paymentInfo     String?
  placedAt        DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  user            User          @relation(fields: [userId], references: [id])
  shippingInfo    ShippingInfo @relation(fields: [shippingInfoId], references: [id])
  orderItems      OrderItem[]
}

model OrderItem {
  id             String      @id @default(uuid())
  orderId        String
  itemConfigId   String
  quantity       Int
  priceAtOrder   Float
  order          Order       @relation(fields: [orderId], references: [id])
  itemConfig     ItemConfig  @relation(fields: [itemConfigId], references: [id])
}

model ShippingInfo {
  id         String   @id @default(uuid())
  userId     String
  name       String
  phone      String
  address1   String
  address2   String?
  city       String
  state      String
  postalCode String
  country    String
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  User       User     @relation(fields: [userId], references: [id])
  Orders     Order[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER 
  ADMIN 
  SUPER
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

enum Fit{
  M
  F
  U
}

enum Size{
  XXS
  XS
  S
  M
  L
  XL
  XXL
  XXXL
}
